package com.iseu.CSlicer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;

import org.neo4j.cypher.ExecutionEngine;
import org.neo4j.cypher.ExtendedExecutionResult;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.ResourceIterator;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.kernel.impl.util.StringLogger;

import storage.DGEdge;

public class ConcurrentSlicer {
	public  GraphDatabaseService database = null;
	public  ExecutionEngine engine;
	public  String DBpath ;                           //数据库路径
	public  String SliceStoreRootFilePath;            //工程存储根目录
	public  HashMap<String, TreeSet<Integer>> slices; //切片集
	public  HashSet<Long> visitedNodes;               //访问过的节点
	public  HashSet<Long> currentNodes;               //当前节点
	/**
	 * 读取数据库
	 * @param dataBasePath 数据库的路径
	 * @return 
	 */
	public ConcurrentSlicer(String dataBasePath,String rootFilePath) {
		SliceStoreRootFilePath = rootFilePath;                            //切片存储根路径
		DBpath = dataBasePath;                                            //路径设置
		database = new GraphDatabaseFactory().newEmbeddedDatabase(DBpath);//数据库创建或读取
		registerShutdownHook(database);                                
		engine = new ExecutionEngine(database,StringLogger.logger(new File("log"))); //查询引擎创建
		slices = new HashMap<>();
		visitedNodes = new HashSet<>();
		currentNodes = new HashSet<>();
	}
	
	private void registerShutdownHook(final GraphDatabaseService graphDb) {
		// Registers a shutdown hook for the Neo4j instance so that it
		// shuts down nicely when the VM exits (even if you "Ctrl-C" the
		// running application).
		Runtime.getRuntime().addShutdownHook(new Thread() {
			@Override
			public void run() {
				graphDb.shutdown();
			}
		});
	}
	
	/**
	 * 节点记录处理
	 * 1.访问过则不用处理
	 * 2.存入切片(路径：行号)
	 * @param node ：遍历到的节点
	 */
	private void nodeRecordHandle(Node node){
		Long nodeID = node.getId();
		if (visitedNodes.contains(nodeID)) {
			return;
		}
		else{
			visitedNodes.add(nodeID);
			currentNodes.add(nodeID);
			if (node.hasProperty("FilePath")&&node.hasProperty("Startline")) {
				String filePath = (String)node.getProperty("FilePath");
				Integer startLine = Integer.valueOf((String) node.getProperty("Startline"));
				if (slices.containsKey(filePath)) {
					slices.get(filePath).add(startLine);
				}
				else{
					TreeSet<Integer> fileLineSet = new TreeSet<>();
					fileLineSet.add(startLine);
					slices.put(filePath, fileLineSet);
				}
			}
		}
	}
	
	/**
	 * 获取语句节点ID
	 * @param filePath 绝对路径
	 * @param lineNumber 节点行号
	 * @return 触发节点的数据库ID号，类型为long
	 */
	public long getNodeID(String filePath,int lineNumber) {
		//开启事务
		Transaction transaction = database.beginTx();
		try{
			//查询语句
			String query = "MATCH node WHERE node.FilePath = \""+
					filePath.replace("\\", "\\\\")+"\" AND node.Startline = \""+
					lineNumber+"\"  RETURN node";
			//获取查询结果
			System.out.println(query);
			ExtendedExecutionResult result = engine.execute(query);
			if (result.isEmpty()) {
				System.out.println("Can not find the statnode");
				return -1;
			}
			//System.out.println(result.dumpToString());直接将结果输出了，result被清空
			//获取node列
			ResourceIterator<Node> nodes = result.javaColumnAs("node");
			if(nodes.hasNext()){
				Node node = nodes.next();
				nodeRecordHandle(node);
				transaction.success();
				return node.getId();
			}
		}	
		finally {
			transaction.close();
		}
		return -1;
	}

	 /**
	  * 返回从源节点经过特定边到达的节点集
	  * @param src       ：源节点
	  * @param edgeType  ：边类型
	  */
	public void getNodesFromSrcByEdgeType(Long src,DGEdge edgeType){
		//开启事务
		Transaction transaction = database.beginTx();
		try{
			//查询语句
			String query = "START a=node("+src+") MATCH a-[r:"+edgeType+"]->b return b";
			System.out.println(query);
			ExtendedExecutionResult result = engine.execute(query);
			if (result.isEmpty()) {
				System.out.println("Can not find the nodes!");
				return ;
			}
			//获取node列
			ResourceIterator<Node> nodes = result.javaColumnAs("b");
			while(nodes.hasNext()){
				Node node = nodes.next();	
				nodeRecordHandle(node);
				System.out.println(node.getId());
			}
			transaction.success();
		}	
		finally {
			transaction.close();
		}
	}
	
	 /**
	  * 源节点反向遍历到的节点集处理
	  * @param src ：源节点
	  */
	public void getNodesToSrc(Long src){
		//开启事务
		Transaction transaction = database.beginTx();
		try{
			//查询语句
			String query = "START b=node("+src+") MATCH a-[]->b return a";
			System.out.println(query);
			ExtendedExecutionResult result = engine.execute(query);
			if (result.isEmpty()) {
				System.out.println("Can not find the nodes!");
				return ;
			}
			//获取node列
			ResourceIterator<Node> nodes = result.javaColumnAs("a");
			while(nodes.hasNext()){
				Node node = nodes.next();	
				nodeRecordHandle(node);
				System.out.println(node.getId());
			}
			transaction.success();
		}	
		finally {
			transaction.close();
		}
	}
	
	/**
	 * 切片节点集初始化
	 * @param criterion  ： 切片准则
	 */
	public void slicePrepare(SliceCriterion criterion) {
		Long statementID = getNodeID(criterion.filePath, criterion.lineNumber);
		if (statementID!=-1) {
			getNodesFromSrcByEdgeType(statementID, DGEdge.toObject);
			Iterator<Long> iterator = currentNodes.iterator();
			while (iterator.hasNext()) {
				Long ID = (Long) iterator.next();
				getNodesFromSrcByEdgeType(ID, DGEdge.typeAnalysis);
			}	
		}
	}

	/**
	 * 切片计算
	 * @param criterion  ：切片准则
	 */
	public void sliceHandle(SliceCriterion criterion) {
		slicePrepare(criterion);
		System.out.println(currentNodes);
		System.out.println(visitedNodes);	
		while(!currentNodes.isEmpty()){
			HashSet<Long> needToRemoveIDS = (HashSet<Long>) currentNodes.clone();
			currentNodes.clear();
			for (Long nodeID : needToRemoveIDS) {
				getNodesToSrc(nodeID);
			}
		}
		System.out.println(slices);
		slicesStorage();
	}
	
	/**
	 * 切片存储
	 */
	public void slicesStorage() {
		Set<Entry<String, TreeSet<Integer>>> slicesSet = slices.entrySet();
		for (Entry<String, TreeSet<Integer>> entry : slicesSet) {
			String filePath = entry.getKey();
			int startIndex = filePath.indexOf(':');
			//需存储的文件路径
			String newFilePath = SliceStoreRootFilePath+filePath.substring(startIndex);
			int desFileIndex = newFilePath.lastIndexOf('\\');
			//需存储的目录路径
			String newDirPath = newFilePath.substring(0, desFileIndex);
			//目录创建
			File dir = new File(newDirPath);
			makeDir(dir);
			//输出到文件
			sliceOutputToFile(entry,filePath,newFilePath);
		}
	}
	
	/**
	 * 从源文件中读取切到的语句，并将它存储到目标文件中
	 * @param entry
	 * @param srcFilePath   ：    源文件
	 * @param desFilePath   ：    目标文件
	 */
	public void sliceOutputToFile(Entry<String, TreeSet<Integer>> entry,String srcFilePath,String desFilePath) {
		//文件创建
		File file = new File(desFilePath);
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try {
			PrintWriter printWriter = new PrintWriter(file);
			BufferedReader srcFileReader = new BufferedReader(
										   new InputStreamReader(
										   new FileInputStream(
										   new File(srcFilePath))));
			TreeSet<Integer> fileSlices = entry.getValue();
			int lastLineNumber = entry.getValue().last();
			for(int i=1;i<=lastLineNumber;++i){
				if (fileSlices.contains(i)) {
					try {
						String line = srcFileReader.readLine();
						System.out.println("Line:"+i+" "+line);
						printWriter.println(line);
						printWriter.flush();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				else{
					try {
						String line = srcFileReader.readLine();
						System.out.println("Line:"+i+" "+line);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
			System.out.println(entry.getValue().last());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 递归创建目录
	 * @param file ： 最底端目录
	 */
	public void makeDir(File file){
		if(file.getParentFile().exists()){
		   file.mkdir();
		}
		else{
		   makeDir(file.getParentFile());
		   file.mkdir();
	    }
	}
	
	public static void main(String[] args) {
		String dataBasePath = "E:\\graph.db";
		ConcurrentSlicer concurrentSlicer = new ConcurrentSlicer(dataBasePath,"E");
		//Criterion
		String filePath = "H:\\Projects\\TestCase\\src\\com\\TestCase01\\Storage.java";
		int lineNumber = 41;
		ArrayList<String> vars = new ArrayList<>();
		vars.add("list");
		SliceCriterion criterion = new SliceCriterion(filePath, lineNumber, vars);
		//SliceHandle
		concurrentSlicer.sliceHandle(criterion);
	}
}
